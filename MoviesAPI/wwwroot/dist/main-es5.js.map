{"version":3,"sources":["src/app/add-movie/add-movie.component.html","src/app/add-user/add-user.component.html","src/app/app.component.html","src/app/details/details.component.html","src/app/fetch-data/fetch-data.component.html","src/app/home/home.component.html","src/app/nav-menu/nav-menu.component.html","src/app/update-movie/update-movie.component.html","src/$_lazy_route_resource lazy namespace object","src/app/add-movie/add-movie.component.ts","src/app/add-user/add-user.component.ts","src/app/app-routing.module.ts","src/app/app.component.ts","src/app/app.module.ts","src/app/details/details.component.ts","src/app/fetch-data/fetch-data.component.ts","src/app/home/home.component.ts","src/app/nav-menu/nav-menu.component.css","src/app/nav-menu/nav-menu.component.ts","src/app/shared/comment.service.ts","src/app/shared/movie.service.ts","src/app/shared/movieComm.service.ts","src/app/shared/user.service.ts","src/app/update-movie/update-movie.component.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h2 class=\\\"text-center\\\">Add a movie</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"movieReactiveForm\\\" [hidden]=\\\"success\\\" autocomplete=\\\"on\\\" (ngSubmit)=\\\"onSubmit(movieReactiveForm)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Title\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Title\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n            <div *ngIf=\\\"(Title.dirty || Title.touched) && Title.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Title.errors.required\\\">Title is required.</div>\\r\\n                <div *ngIf=\\\"Title.errors.minlength\\\">Title should have at least 3 characters.</div>\\r\\n                <div *ngIf=\\\"Title.errors.maxlength\\\">Title should have at most 50 characters.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <textarea formControlName=\\\"Description\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Description\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n            <div *ngIf=\\\"(Description.dirty || Description.touched) && Description.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Description.errors.required\\\">Description is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Genre\\\">Genre: </label>\\r\\n            <select id=\\\"genre \\\" formControlName=\\\"Genre\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Genre\\\" required>\\r\\n                <option value=\\\"Adventure\\\">Adventure</option>\\r\\n                <option value=\\\"Comedy\\\">Comedy</option>\\r\\n                <option value=\\\"Horror\\\">Horror</option>\\r\\n                <option value=\\\"SciFi\\\">SciFi</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"(Genre.dirty || Genre.touched) && Genre.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Genre.errors.required\\\">Genre is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Duration\\\" type=\\\"number\\\" placeholder=\\\"Duration\\\" required>\\r\\n            <div *ngIf=\\\"(Duration.dirty || Duration.touched) && Duration.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Duration.errors.required\\\">Duration is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"YearOfRelease\\\" type=\\\"number\\\" placeholder=\\\"Year of release\\\" min=\\\"1900\\\" max=\\\"2020\\\" required>\\r\\n            <div *ngIf=\\\"(YearOfRelease.dirty || YearOfRelease.touched) && YearOfRelease.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"YearOfRelease.errors.required\\\">Year of release is required.</div>\\r\\n                <div *ngIf=\\\"YearOfRelease.errors?.min\\\">Year of release should be at least 1900.</div>\\r\\n                <div *ngIf=\\\"YearOfRelease.errors?.max\\\">Year of release should be at most the current year.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Director\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Director\\\" required>\\r\\n            <div *ngIf=\\\"(Director.dirty || Director.touched) && Director.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Director.errors.required\\\">Director is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"DateAdded\\\">Date added: </label>\\r\\n            <input formControlName=\\\"DateAdded\\\" type=\\\"date\\\" placeholder=\\\"yyyy-MM-dd\\\" required>\\r\\n            <div *ngIf=\\\"(DateAdded.dirty || DateAdded.touched) && DateAdded.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"DateAdded.errors.required\\\">Date added is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Rating\\\">Rating: </label>\\r\\n            <input formControlName=\\\"Rating\\\" type=\\\"number\\\" class=\\\"form-control\\\" min=\\\"0\\\" max=\\\"10\\\" required>\\r\\n            <div *ngIf=\\\"(Rating.dirty || Rating.touched) && Rating.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Rating.errors.required\\\">Rating is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n               <div class=\\\"input-group\\\">\\r\\n                   <label for=\\\"Watched\\\">Watched:</label>\\r\\n                   <input formControlName=\\\"Watched\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n                   <label for=\\\"Watched\\\">Never watched:</label>\\r\\n                   <input formControlName=\\\"Watched\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n                   <div *ngIf=\\\"(Watched.dirty || Watched.touched) && Watched.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                       <div *ngIf=\\\"Watched.errors.required\\\">Please select your option.</div>\\r\\n                   </div>\\r\\n               </div> <br>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formMovie.invalid\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-danger btn-lg btn-block\\\" (click)=\\\"movieReactiveForm.reset()\\\">Reset</button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">Add user</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"userReactiveForm\\\" [hidden]=\\\"success\\\" autocomplete=\\\"on\\\" (ngSubmit)=\\\"onSubmit(userReactiveForm)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"FirstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"FirstName\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"LastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"LastName\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Username\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Password\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n\\r\\n\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-danger btn-lg btn-block\\\" (click)=\\\"userReactiveForm.reset()\\\">Reset</button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\"","export default \"<body>\\r\\n    <app-nav-menu></app-nav-menu>\\r\\n\\r\\n    <div class=\\\"container\\\">\\r\\n\\r\\n        <router-outlet></router-outlet>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</body>\\r\\n\"","export default \"\\r\\n<h2 class=\\\"text-center\\\">Details for {{movieCommService.selectedMovie.Title}}</h2>\\r\\n<br>\\r\\n\\r\\n<label>Id: {{movieCommService.selectedMovie.Id}}</label>\\r\\n<br>\\r\\n<label>Title: {{movieCommService.selectedMovie.Title}}</label>\\r\\n<br>\\r\\n<label>Description: {{movieCommService.selectedMovie.Description}}</label>\\r\\n<br>\\r\\n<label>Genre: {{movieCommService.selectedMovie.Genre}}</label>\\r\\n<br>\\r\\n<label>Duration: {{movieCommService.selectedMovie.Duration}}</label>\\r\\n<br>\\r\\n<label>Year of release: {{movieCommService.selectedMovie.YearOfRelease}}</label>\\r\\n<br>\\r\\n<label>Director: {{movieCommService.selectedMovie.Director}}</label>\\r\\n<br>\\r\\n<label>Date added: {{movieCommService.selectedMovie.DateAdded | date: 'yyyy-MM-dd'}}</label>\\r\\n<br>\\r\\n<label>Rating: {{movieCommService.selectedMovie.Rating}}</label>\\r\\n<br>\\r\\n<label>Watched: {{movieCommService.selectedMovie.Watched}}</label>\\r\\n<br>\\r\\n<br>\\r\\n<h3>Comments:</h3>\\r\\n\\r\\n<table class=\\\"table table-hover\\\">\\r\\n\\r\\n    <thead class=\\\"thead-dark\\\">\\r\\n        <tr>\\r\\n            <th>Id</th>\\r\\n            <th>Text</th>\\r\\n            <th>Important</th>\\r\\n        </tr>\\r\\n    </thead>\\r\\n\\r\\n     \\r\\n        <tr *ngFor=\\\"let c of movieCommService.selectedMovie.Comments\\\">\\r\\n            <td>{{c.Id}}</td>\\r\\n            <td>{{c.Text}}</td>\\r\\n            <td>{{c.Important}}</td>\\r\\n            <td (click)=\\\"onDelete(c.Id)\\\"> Delete</td>\\r\\n            <td (click)=\\\"populateForm(c)\\\"> Update</td>\\r\\n        </tr>\\r\\n\\r\\n\\r\\n\\r\\n    <!--\\r\\n    <ng-container *ngFor=\\\"let c of comments\\\">        iterez prin comments adica apelez get din controller de Comm\\r\\n    Nu pot avea ngFor si ngIf in acelasi element; creez un ng-container, care nu afecteaza DOM \\r\\n    <tr *ngIf=\\\"c.movieID == movieService.selectedMovie.Id\\\">\\r\\n        <td>{{c.Id}}</td>\\r\\n        <td>{{c.Text}}</td>\\r\\n        <td>{{c.Important}}</td>\\r\\n        <td (click)=\\\"onDelete(c.id)\\\"> Delete</td>\\r\\n        <td (click)=\\\"onUpdate(c.id)\\\"> Update</td>\\r\\n    </tr>\\r\\n    </ng-container>\\r\\n    -->\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</table>\\r\\n\\r\\n\\r\\n    <br><br>\\r\\n    <h3>Add comment:</h3><br>\\r\\n                         <form #formComment=\\\"ngForm\\\" (submit)=\\\"onSubmit(formComment)\\\">\\r\\n\\r\\n                             <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"commentService.formDataComm.Id\\\">\\r\\n\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <textarea name=\\\"Text\\\" #Text=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Text\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Text\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n                             </div>\\r\\n                             <br>\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <label for=\\\"Important\\\">Important: </label>\\r\\n                                 <input name=\\\"Important\\\" #Important=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Important\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n                                 <label for=\\\"Important\\\">Not important: </label>\\r\\n                                 <input name=\\\"Important\\\" #Important=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Important\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n                             </div>\\r\\n                             <br>\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formComment.invalid\\\">\\r\\n                                     Add comment\\r\\n                                 </button>\\r\\n                             </div>\\r\\n\\r\\n                         </form>\\r\\n\\r\\n    <br>\\r\\n    <button (click)=\\\"goBack()\\\">Back</button>\\r\\n\\r\\n\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">List of movies</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<!--<h4>Filter by date added</h4>\\r\\n<br>\\r\\n<form #form=\\\"ngForm\\\" autocomplete=\\\"on\\\" (submit)=\\\"onSubmit(form)\\\">\\r\\n    <p>From date:</p>\\r\\n    <input name=\\\"from\\\" [(ngModel)]=\\\"from\\\">\\r\\n    <br>\\r\\n    <p>To date:</p>\\r\\n    <input name=\\\"to\\\" [(ngModel)]=\\\"to\\\">\\r\\n    <br>\\r\\n    <button type=\\\"submit\\\">Filter</button>\\r\\n    <br>\\r\\n</form>\\r\\n<br>\\r\\n<br>\\r\\n<button (click)=\\\"refreshList()\\\">Refresh</button>\\r\\n<br>-->\\r\\n\\r\\n\\r\\n    <table class=\\\"table table-hover\\\">\\r\\n\\r\\n        <thead class=\\\"thead-dark\\\">\\r\\n            <tr>\\r\\n                <th>ID</th>\\r\\n                <th>Title</th>\\r\\n                <th>Description</th>\\r\\n                <th>Genre</th>\\r\\n                <th>Duration</th>\\r\\n                <th>Year of release</th>\\r\\n                <th>Director</th>\\r\\n                <th>Date added</th>\\r\\n                <th>Rating</th>\\r\\n                <th>Watched</th>\\r\\n                <th>Number of comments</th>\\r\\n                <th>Operations</th>\\r\\n\\r\\n            </tr>\\r\\n        </thead>\\r\\n\\r\\n\\r\\n        <tr *ngFor=\\\"let m of movies\\\">\\r\\n\\r\\n            <td>{{m.Id}}</td>\\r\\n            <td>{{m.Title}}</td>\\r\\n            <td>{{m.Description}}</td>\\r\\n            <td>{{m.Genre}}</td>\\r\\n            <td>{{m.Duration}}</td>\\r\\n            <td>{{m.YearOfRelease}}</td>\\r\\n            <td>{{m.Director}}</td>\\r\\n            <td>{{m.DateAdded | date: 'yyyy-MM-dd'}}</td>  <!-- pipe format date-->\\r\\n            <td>{{m.Rating}}</td>\\r\\n            <td>{{m.Watched}}</td>\\r\\n            <td>{{m.NumberOfComments}}</td>  \\r\\n            <td>\\r\\n                <a [routerLink]=\\\"['/fetch-data', m.Id]\\\" routerLinkActive=\\\"active\\\"> Details</a>\\r\\n                <a [routerLink]=\\\"['/update', m.Id]\\\" routerLinkActive=\\\"active\\\" (click)=\\\"populateForm(m)\\\"> Update</a>\\r\\n                <a [routerLink]=\\\"['/delete', m.Id]\\\" routerLinkActive=\\\"active\\\" (click)=\\\"onDelete(m.Id)\\\"> Delete</a>\\r\\n            </td>  <!-- transmit id prin router link -->\\r\\n\\r\\n        </tr>\\r\\n\\r\\n    </table>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<h1>Hello, world!</h1>\\r\\n<p>Welcome to your new single-page application, built with:</p>\\r\\n<ul>\\r\\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\\r\\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\\r\\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\\r\\n</ul>\\r\\n<p>To help you get started, we've also set up:</p>\\r\\n<ul>\\r\\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\\r\\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\\r\\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\\r\\n</ul>\\r\\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\\r\\n\"","export default \"<header>\\r\\n    <nav class=\\\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n            <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/']\\\">Home</a>\\r\\n            <button class=\\\"navbar-toggler\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    data-toggle=\\\"collapse\\\"\\r\\n                    data-target=\\\".navbar-collapse\\\"\\r\\n                    aria-label=\\\"Toggle navigation\\\"\\r\\n                    [attr.aria-expanded]=\\\"isExpanded\\\"\\r\\n                    (click)=\\\"toggle()\\\">\\r\\n                <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n            </button>\\r\\n            <div class=\\\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\\\"\\r\\n                 [ngClass]=\\\"{ show: isExpanded }\\\">\\r\\n                <ul class=\\\"navbar-nav flex-grow\\\">\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/fetch-data']\\\">Fetch data</a>\\r\\n                    </li>\\r\\n\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/add']\\\">Add movie</a>\\r\\n                    </li>\\r\\n\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/addUser']\\\">Register</a>\\r\\n                    </li>\\r\\n\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">Update movie \\\"{{service.formDataMovie.Title}}\\\"</h2>\\r\\n<br>\\r\\n\\r\\n<form #formMovie=\\\"ngForm\\\" autocomplete=\\\"on\\\" (submit)=\\\"onSubmit(formMovie)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Title\\\" #Title=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Title\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Title\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <textarea name=\\\"Description\\\" #Description=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Description\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Description\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Genre\\\">Genre: </label>\\r\\n            <select id=\\\"genre \\\" form=\\\"Genre\\\" name=\\\"Genre\\\" #Genre=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Genre\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Genre\\\" required>\\r\\n                <option value=\\\"Adventure\\\">Adventure</option>\\r\\n                <option value=\\\"Comedy\\\">Comedy</option>\\r\\n                <option value=\\\"Horror\\\">Horror</option>\\r\\n                <option value=\\\"SciFi\\\">SciFi</option>\\r\\n            </select>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Duration\\\" #Duration=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Duration\\\" type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"Duration\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"YearOfRelease\\\" #YearOfRelease=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.YearOfRelease\\\" type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"Year of release\\\" min=\\\"1900\\\" max=\\\"2020\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Director\\\" #Director=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Director\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Director\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label>Date added: </label>\\r\\n            <!-- [(ngModel)] = 2 way data-binding-->\\r\\n            <input name=\\\"DateAdded\\\" #DateAdded=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.DateAdded\\\" type=\\\"date\\\" class=\\\"form-control\\\" placeholder=\\\"Date added\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Rating\\\">Rating: </label>\\r\\n            <input name=\\\"Rating\\\" #Rating=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Rating\\\" type=\\\"number\\\" class=\\\"form-control\\\" min=\\\"0\\\" max=\\\"10\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Watched\\\">Watched:</label>\\r\\n            <input name=\\\"Watched\\\" #Watched=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Watched\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n            <label for=\\\"Watched\\\">Never watched:</label>\\r\\n            <input name=\\\"Watched\\\" #Watched=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Watched\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formMovie.invalid\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { NgForm, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Output, EventEmitter } from '@angular/core';     // Event Emitter pt submit reactive form\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\r\nimport { Movie } from '../shared/movie.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-movie',\r\n  templateUrl: './add-movie.component.html',\r\n  styles: []\r\n})\r\n\r\n\r\n\r\n\r\nexport class AddMovieComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n    movieReactiveForm: FormGroup;\r\n\r\n    get Title() {\r\n        return this.movieReactiveForm.get('Title');\r\n    }\r\n\r\n    get Description() {\r\n        return this.movieReactiveForm.get('Description');\r\n    }\r\n\r\n    get Genre() {\r\n        return this.movieReactiveForm.get('Genre');\r\n    }\r\n\r\n    get Duration() {\r\n        return this.movieReactiveForm.get('Duration');\r\n    }\r\n\r\n    get YearOfRelease() {\r\n        return this.movieReactiveForm.get('YearOfRelease');\r\n    }\r\n\r\n    get Director() {\r\n        return this.movieReactiveForm.get('Director');\r\n    }\r\n\r\n    get DateAdded() {\r\n        return this.movieReactiveForm.get('DateAdded');\r\n    }\r\n\r\n    get Rating() {\r\n        return this.movieReactiveForm.get('Rating');\r\n    }\r\n\r\n    get Watched() {\r\n        return this.movieReactiveForm.get('Watched');\r\n    }\r\n\r\n\r\n\r\n    // Form state\r\n    loading = false;\r\n    success = false;\r\n\r\n\r\n\r\n\r\n    constructor(public service: MovieService,\r\n        private location: Location,\r\n        private fb: FormBuilder\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n\r\n        this.movieReactiveForm = this.fb.group({\r\n            Title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n            Description: ['', [Validators.required]],\r\n            Genre: ['', [Validators.required]],\r\n            Duration: ['', [Validators.required]],\r\n            YearOfRelease: ['', [Validators.required, Validators.min(1900), Validators.max(2020)]],\r\n            Director: ['', [Validators.required]],\r\n            DateAdded: ['', [Validators.required]],         // ar trebui custom validator pt dateAdded < Date.now\r\n            Rating: ['', [Validators.required]],\r\n            Watched: ['', [Validators.required]]\r\n        });\r\n    \r\n\r\n            this.resetForm();   // initialize model property  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    onSubmit(form) {\r\n\r\n        this.movieReactiveForm = form;  // form transmis ca parametru din html\r\n        this.service.formDataMovie = this.movieReactiveForm.value;  // service.formDataMovie ia valoarea form din html\r\n      \r\n        this.service.postMovie()\r\n            // .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if POST operation succeeds we set the form to initial values\r\n                    console.log(\"successfully added\");\r\n                    this.resetForm();\r\n                    this.service.getMovies(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    resetForm() {\r\n        this.service.formDataMovie = {  // initialize model property\r\n                        Id: 0,\r\n                        Title: '',\r\n                        Description: '',\r\n                        Genre: null,\r\n                        Duration: null,\r\n                        YearOfRelease: null,\r\n                        Director: '',\r\n                        DateAdded: '',\r\n                        Rating: null,\r\n                        Watched: null\r\n                    }\r\n           \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../shared/user.service';\r\nimport { NgForm, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Output, EventEmitter } from '@angular/core';     // Event Emitter pt submit reactive form\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\r\nimport { User } from '../shared/user.model';\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'app-add-user',\r\n    templateUrl: './add-user.component.html',\r\n    styles: []\r\n})\r\n\r\n\r\n\r\n\r\nexport class AddUserComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n    userReactiveForm: FormGroup;\r\n\r\n    get FirstName() {\r\n        return this.userReactiveForm.get('FirstName');\r\n    }\r\n\r\n    get LastName() {\r\n        return this.userReactiveForm.get('LastName');\r\n    }\r\n\r\n    get Username() {\r\n        return this.userReactiveForm.get('Username');\r\n    }\r\n\r\n\r\n    // Form state\r\n    loading = false;\r\n    success = false;\r\n\r\n\r\n\r\n\r\n    constructor(public service: UserService,\r\n        private location: Location,\r\n        private fb: FormBuilder\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n\r\n        this.userReactiveForm = this.fb.group({\r\n            FirstName: ['', ['']],\r\n            LastName: ['', ['']],\r\n            Username: ['', ['']],\r\n            Password: ['', ['']],\r\n\r\n        });\r\n\r\n\r\n        this.resetForm();   // initialize model property  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onSubmit(form) {\r\n\r\n        this.userReactiveForm = form;  // form transmis ca parametru din html\r\n        this.service.formDataUser = this.userReactiveForm.value;  // service.formDataMovie ia valoarea form din html\r\n\r\n        this.service.postUser()\r\n            // .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if POST operation succeeds we set the form to initial values\r\n                    console.log(\"successfully added\");\r\n                    this.resetForm();\r\n                    this.service.getUsers(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    resetForm() {\r\n        this.service.formDataUser = {  // initialize model property\r\n            Id: 0,\r\n            FirstName: '',\r\n            LastName: '',\r\n            Username: '',\r\n            Password: '',\r\n        }\r\n\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {HomeComponent} from \"./home/home.component\";\r\nimport {FetchDataComponent} from \"./fetch-data/fetch-data.component\";\r\nimport { DetailsComponent } from \"./details/details.component\";\r\nimport { AddMovieComponent } from \"./add-movie/add-movie.component\";\r\nimport { UpdateMovieComponent } from \"./update-movie/update-movie.component\";\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    \r\n    { path: '', component: HomeComponent, pathMatch: 'full' },\r\n    { path: 'fetch-data', component: FetchDataComponent },\r\n    { path: 'fetch-data/:id', component: DetailsComponent },\r\n    { path: 'add', component: AddMovieComponent },\r\n    { path: 'update/:id', component: UpdateMovieComponent },\r\n    { path: 'delete/:id', component: FetchDataComponent },\r\n    { path: 'addUser', component: AddUserComponent } \r\n \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { MovieService } from './shared/movie.service';\r\nimport { MovieCommService } from './shared/movieComm.service';\r\nimport { FetchDataComponent } from './fetch-data/fetch-data.component';\r\nimport { DetailsComponent } from './details/details.component';\r\nimport { AddMovieComponent } from './add-movie/add-movie.component';\r\nimport { UpdateMovieComponent } from './update-movie/update-movie.component';\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        NavMenuComponent,\r\n        HomeComponent,\r\n        FetchDataComponent,\r\n        DetailsComponent,\r\n        AddMovieComponent,\r\n        UpdateMovieComponent,\r\n        AddUserComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        AppRoutingModule\r\n    ],\r\n\r\n    providers: [MovieService],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Location } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Comment } from '../shared/comment.model';\r\nimport { CommentService } from '../shared/comment.service';\r\nimport { MovieComm } from '../shared/movieComm.model';\r\nimport { MovieCommService } from '../shared/movieComm.service';\r\n\r\n\r\n@Component({\r\n    selector: 'app-details',\r\n    templateUrl: './details.component.html',\r\n    styles: []\r\n})\r\n\r\nexport class DetailsComponent implements OnInit {\r\n\r\n    public comments: Comment[];\r\n    public idCommSelected: number;\r\n    public commToBeUpdated: Comment;\r\n    public copyOfSelectedComment: MovieComm; // pt ca sunt operatii asincrone si treb copiat sa il pot reaccesa\r\n\r\n\r\n    constructor(private movieCommService: MovieCommService,   // importam service-ul care include si proprietatea Comments in Movie\r\n                private commentService: CommentService,\r\n                private activatedRoute: ActivatedRoute,\r\n                private location: Location) { }\r\n\r\n\r\n\r\n\r\n    // https://www.tektutorialshub.com/angular/angular-passing-parameters-to-route/\r\n    // https://angular.io/tutorial/toh-pt5\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit(): void {\r\n\r\n       // this.resetForm();   // initialize model property\r\n\r\n        this.getMovieById();\r\n      //  this.getComments();\r\n\r\n        //if (this.commentService.updateBtnCommClicked == true) // daca s-a apasat butonul de Update\r\n        //{\r\n        //    this.populateForm();\r\n        //    console.log(\"dsgvds\" + this.commentService.commentList);\r\n        //}\r\n\r\n\r\n       // else\r\n            this.resetForm();   // initialize model property\r\n\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getMovieById(): void {\r\n        const id = +this.activatedRoute.snapshot.paramMap.get('id');\r\n        console.log(\"id din  details \" + id);\r\n        this.movieCommService.getMovieById(id)    // returneaza un Observable si nu mai este asincron\r\n            // .subscribe(m => this.selectedMovie = m);  // tratez in service getById, aici doar apelez\r\n            .toPromise()\r\n            .then(response => {\r\n                this.movieCommService.selectedMovie = response as MovieComm;\r\n                this.copyOfSelectedComment = this.movieCommService.selectedMovie;  // e tip MovieComm\r\n            });\r\n\r\n        console.log(this.movieCommService.selectedMovie);  // daca foloseam Subscribe, getMovieById era asincron si intarzia functia pana sa se proceseze si atunci selectedMovie ramanea tot undefined pt ca nu e initializat sus\r\n        \r\n    }\r\n\r\n\r\n    // The route.snapshot is a static image of the route information shortly after the component was created.\r\n\r\n    // The paramMap is a dictionary of route parameter values extracted from the URL.The \"id\" key returns the id of the movie to fetch.\r\n\r\n    // Route parameters are always strings. The JavaScript(+) operator converts the string to a number, which is what a movie id should be.\r\n\r\n\r\n\r\n\r\n\r\n    //// Populam tabelul din Form; in form verific cu ngIf daca comm.movieId = movie.id\r\n    //getComments() {         // Get din controller de Comm\r\n\r\n    //    this.commentService.getComments()\r\n    //        .subscribe(data => this.comments = data)\r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n    resetForm(formComment?: NgForm) {    // form? parametrul poate fi null\r\n\r\n        //if (this.commentService.updateBtnCommClicked == true) // daca s-a apasat butonul de Update\r\n        //    this.populateForm();\r\n\r\n        if (formComment != null)\r\n            formComment.form.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n\r\n        this.commentService.formDataComm = {  // initialize model property\r\n            Id: 0,\r\n            MovieID: 0,\r\n            Text: '',\r\n            Important: true,\r\n        }\r\n\r\n\r\n        this.commToBeUpdated = { // altfel e undefined cand vreau sa-l initializez\r\n            Id: 0,\r\n            MovieID: 0,\r\n            Text: '',\r\n            Important: true,\r\n        }\r\n\r\n        this.commentService.formDataComm.Id = 0; // il fac explicit 0 pt ca ramane suprascris cu idComment updatat anterior din cauza apelului  autofillFormForUpdate()  daca am apucat sa fac inainte update\r\n\r\n      //  console.log(formComment.value.Id);\r\n    }\r\n\r\n\r\n\r\n\r\n    onSubmit(formComment: NgForm) {\r\n\r\n        // facem diferenta intre Post si PUT verificand Id; undefined sau 0\r\n       // if (formComment.value.Id == 0 && this.commentService.updateBtnCommClicked == false)         //{)\r\n\r\n        if (this.commentService.formDataComm.Id == 0)\r\n            this.insertRecord(formComment);\r\n\r\n        else  // update\r\n            this.updateRecord(formComment);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    insertRecord(formComment: NgForm) {  // POST request on submit\r\n        this.commentService.formDataComm.MovieID =  +this.activatedRoute.snapshot.paramMap.get('id');\r\n\r\n        console.log(this.commentService.formDataComm);   // aici inca nu are id, abia dupa ce ii fac post primeste id\r\n\r\n        this.commentService.postComment()       //.subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n            response => {    // if POST operation succeeds we set the form to initial values\r\n                console.log(this.commentService.formDataComm);\r\n                this.resetForm(formComment);\r\n                  this.getMovieById();    // refresh la lista, care e o lista de moviesComm\r\n               // this.getComments();   // Nu, lista are obiecte Comm\r\n            },\r\n\r\n            error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // e asincron si folosim Promise in loc de subscribe\r\n    updateRecord(formComment: NgForm) {  // PUT request on submit\r\n        \r\n        formComment.value.Id = this.commToBeUpdated.Id;  // asignez lui formDataComm id-ul lui commToBeUpdated;                 copiat din apelul onUpdate() la click event\r\n        //formComment.value.MovieID = +this.activatedRoute.snapshot.paramMap.get('id');  // asignez movieID din ruta, sa pot avea toate proprietatile pt a putea construi un movie, pt ca nu iau toate proprietatile din form\r\n\r\n        console.log(formComment.value.Id);\r\n\r\n        //this.getMovieById();\r\n\r\n        console.log(\"am intrat in updateRecord \"+ formComment.value);\r\n\r\n        this.commentService.updateComment(formComment.value) // ID\r\n            //.subscribe(   // // Call subscribe() to start listening for updates.\r\n\r\n            //    response => {    // if PUT operation succeeds we set the form to initial values\r\n            //        this.resetForm(form);\r\n            //           this.getMovieById(); // refresh la lista;                                                          // success ia ca parametri un mesaj si numele aplicatiei 'Title' tip string\r\n            //      //  this.getComments();\r\n            //    },\r\n            .toPromise()\r\n            .then(response => {    // if PUT operation succeeds we set the form to initial values\r\n\r\n                //this.copyOfSelectedComment = this.movieCommService.selectedMovie;  // e tip MovieComm\r\n\r\n                this.resetForm(formComment);\r\n                this.getMovieById(); // refresh la lista;                                                          // success ia ca parametri un mesaj si numele aplicatiei 'Title' tip string\r\n                  //  this.getComments();\r\n                console.log(\"Update comment successfully\");\r\n            },\r\n\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n        this.resetForm(formComment);\r\n        this.commentService.updateBtnCommClicked = false;   // setam inapoi butonul de update la false\r\n        //this.getMovieById(); // refresh la lista; \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    // ATENTIE: IN TABEL AM TIPUL MOVIECOMM, NU COMMENT!!\r\n    populateForm(c)  // populam form cu movieComm selectat si incarcat din server, dar transformat intru-un Comment\r\n    {                           // form data este proprietatea din service referitoare la form\r\n\r\n        console.log(this.copyOfSelectedComment);\r\n        console.log(this.commentService.getCommentById(c.Id));\r\n\r\n        //this.commentService.updateBtnCommClicked = true; // s-a apasat butotnul de Update\r\n        //c.Id = this.copyOfSelectedComment.Comments.Id;   // fac legaturi intre cele 2 obiecte; transfer proprietati de la copie la obiectul nou construit\r\n        //c.MovieID = this.copyOfSelectedComment.Comments.MovieID;\r\n        //c.Text = this.copyOfSelectedComment.Comments.Text;\r\n        //c.Important = this.copyOfSelectedComment.Comments.Important;\r\n\r\n        this.commentService.getCommentById(c.Id)\r\n            .toPromise()\r\n            .then(result => {\r\n                this.commentService.selectedComment = result;\r\n\r\n                console.log(\"comment selectat este \" + this.commentService.selectedComment.Text);\r\n\r\n                this.commToBeUpdated.Id = this.commentService.selectedComment.Id;     // this.idCommSelected;\r\n                this.commToBeUpdated.MovieID = this.commentService.selectedComment.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n                this.commToBeUpdated.Text = this.commentService.selectedComment.Text\r\n                this.commToBeUpdated.Important = this.commentService.selectedComment.Important;\r\n\r\n                console.log(this.commToBeUpdated);\r\n\r\n            }, error => console.error(error));\r\n\r\n\r\n\r\n\r\n        //this.commToBeUpdated.Id = this.commentService.getCommentById(c.Id);     // this.idCommSelected;\r\n        //this.commToBeUpdated.MovieID = c.Comments.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n        //this.commToBeUpdated.Text = c.Comments.Text\r\n        //this.commToBeUpdated.Important = c.Comments.Important;\r\n        \r\n\r\n        // transformam MovieComm in Comm\r\n        //this.commToBeUpdated.Id = c.Comments.Id;     // this.idCommSelected;\r\n        //this.commToBeUpdated.MovieID = c.Comments.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n        //this.commToBeUpdated.Text = c.Comments.Text\r\n        //this.commToBeUpdated.Important = c.Comments.Important;\r\n\r\n        this.commentService.formDataComm = this.commToBeUpdated;        // formData din service ia valoarea noului obiect construit\r\n\r\n        console.log(this.commentService.formDataComm.Text);\r\n    }           // formDataComm este suprascris si il pot apela ca parametru la populateForm in ngOnInit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //onUpdate(id) {  \r\n    //    this.idCommSelected = id;\r\n    //    console.log(\"clicked, id = \", this.idCommSelected);\r\n    //    this.commentService.updateBtnCommClicked = true; // s-a apasat butotnul de Update\r\n\r\n\r\n    //}\r\n\r\n\r\n\r\n\r\n    onDelete(id) {\r\n        console.log(id);\r\n        this.commentService.deleteComment(id)\r\n            .subscribe(response => {\r\n                console.log(\"successfully deleted\");\r\n                this.getMovieById(); // refresh\r\n            },\r\n                error => {\r\n                    console.log(error);\r\n                });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    goBack(): void {\r\n        this.location.back();\r\n    }\r\n}   \r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { Movie } from '../shared/movie.model';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n    selector: 'app-fetch-data',\r\n    templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent implements OnInit {\r\n\r\n    public movies: Movie[];\r\n    public filteredMovies: Movie[];\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    submitPressed = false;\r\n\r\n\r\n    constructor(private service: MovieService) { }\r\n\r\n    ngOnInit() {\r\n        this.getAllMovies();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onSubmit(form: NgForm) {\r\n        this.submitPressed = true; // inseamna  ca s-a accesat input-ul de filter si returnam filteredMovies\r\n        this.getFilteredMoviesByDate(form);\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // in acelasi tabel afisez fie toate filmele, fie pe cele filtrate\r\n    // diferenta o face o variabila submitPressed care initial este false si isi schimba valoarea daca se apasa submit\r\n\r\n    getAllMovies() {\r\n        this.service.getMovies()\r\n            .subscribe(data => this.movies = data);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getFilteredMoviesByDate(form: NgForm) {\r\n\r\n        console.log(form.value.from);\r\n\r\n        this.service.filterMoviesByDate(form.value.from, form.value.to)     //form.value.\r\n            // .subscribe(data => {\r\n            .toPromise()\r\n            .then(response => {\r\n                this.movies = response;\r\n                console.log(this.movies)\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onDelete(id) {\r\n        console.log(\"id este \" + id);\r\n        this.service.deleteMovie(id)\r\n            .subscribe(response => {\r\n                console.log(\"successfully deleted\");\r\n                this.getAllMovies(); // refresh\r\n            },\r\n                error => {\r\n                    console.log(error);\r\n                });\r\n  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // auto fill form\r\n    populateForm(movie: Movie)  // populam form cu movie selectat si incarcat din server\r\n    {                           // form data este proprietatea din service referitoare la form\r\n\r\n        this.service.formDataMovie = movie; \r\n        this.service.updateBtnMovieClicked = true;   // se apasa butonul, il apelez in add-movie\r\n        this.service.idCopied = movie.Id;   // copiez valoare id si apelez din add-movie la update\r\n\r\n        console.log(movie);\r\n\r\n        //this.service.formData = Object.assign({}, movie);  // in formData pune o copie a obiectului meu movie\r\n        //console.log(this.service.formData);\r\n        // Since the form is bound to formData properties,\r\n        // the form field will get with populated corresponding details.\r\n\r\n     \r\n    }\r\n\r\n\r\n\r\n\r\n    refreshList() {\r\n        console.log(\"refresh clicked\");\r\n        this.getAllMovies();\r\n    }\r\n\r\n}\r\n\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n}\r\n","export default \"a.navbar-brand {\\r\\n  white-space: normal;\\r\\n  text-align: center;\\r\\n  word-break: break-all;\\r\\n}\\r\\n\\r\\nhtml {\\r\\n  font-size: 14px;\\r\\n}\\r\\n\\r\\n@media (min-width: 768px) {\\r\\n  html {\\r\\n    font-size: 16px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.box-shadow {\\r\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFDQTtFQUNFO0lBQ0UsZUFBZTtFQUNqQjtBQUNGOztBQUVBO0VBQ0UsOENBQThDO0FBQ2hEIiwiZmlsZSI6InNyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImEubmF2YmFyLWJyYW5kIHtcclxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcbn1cclxuXHJcbmh0bWwge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcclxuICBodG1sIHtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICB9XHJcbn1cclxuXHJcbi5ib3gtc2hhZG93IHtcclxuICBib3gtc2hhZG93OiAwIC4yNXJlbSAuNzVyZW0gcmdiYSgwLCAwLCAwLCAuMDUpO1xyXG59XHJcbiJdfQ== */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Comment } from './comment.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommentService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    commentList: Comment[];\r\n    formDataComm: Comment;\r\n    selectedComment: Comment;\r\n    updateBtnCommClicked: boolean;\r\n\r\n\r\n    constructor(private http: HttpClient) {}\r\n  \r\n\r\n  postComment() {    \r\n    return this.http.post(this.rootURL + '/comments', this.formDataComm);   // POST function returns Observable\r\n\r\n  }\r\n\r\n\r\n\r\n  getComments() {\r\n    return this.http.get<Comment[]>(this.rootURL + '/comments')\r\n \r\n  }\r\n\r\n\r\n  getCommentById(id) {\r\n        console.log(\"id este \" + id);\r\n      return this.http.get<Comment>(this.rootURL + '/comments/' + id);\r\n           // .subscribe(result => {\r\n           //.toPromise()\r\n           //.then(result => {\r\n           //     this.selectedComment= result;\r\n\r\n           //     console.log(\"comment selectat este \" + this.selectedComment.Text);\r\n\r\n           // }, error => console.error(error));\r\n    }\r\n\r\n\r\n\r\n\r\n  updateComment(formData: Comment) {\r\n      return this.http.put(this.rootURL + '/comments/' + formData.Id, this.formDataComm);\r\n\r\n  }\r\n\r\n\r\n  deleteComment(id) {\r\n    return this.http.delete(this.rootURL + '/comments/' + id);  \r\n  \r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Movie } from './movie.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class MovieService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    public formDataMovie: Movie;\r\n    public selectedMovie: Movie;\r\n    public updateBtnMovieClicked = false;  // initial butonul de update nu e apasat; il importam in fetch-data\r\n    public idCopied: number;  // copiez id sa pot apela la update pt ca voi redefini id ca undefined intre timp\r\n\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n\r\n\r\n    postMovie() {\r\n        console.log(\"din service\" + this.formDataMovie.Title)\r\n    return this.http.post(this.rootURL + '/movies', this.formDataMovie);   // POST function returns Observable\r\n    // returneaza un movie tip service.formData\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n  getMovies() {\r\n      return this.http.get<Movie[]>(this.rootURL + '/movies')\r\n     \r\n  }\r\n\r\n\r\n    //getMovieById(id) {                // in serviceComm pt ca returnez si lista de Comments\r\n    //    console.log(\"id este \" + id);\r\n    //    return this.http.get<Movie>(this.rootURL + '/movies/' + id)\r\n         \r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // GET: movies/filter?from=a&to=b\r\n    filterMoviesByDate(from, to) {\r\n        return this.http.get<Movie[]>(this.rootURL + '/movies/filter?from=' + from + '&to=' + to);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateMovie(formData: Movie) {\r\n        console.log(formData);\r\n    return this.http.put(this.rootURL + '/movies/' + this.idCopied, this.formDataMovie);   // transmite URL si ID in PUT request prin concatenare\r\n    // returneaza un Observable\r\n        // in idCopied e copiata valoarea id caruia i se face update; daca zic this.formData.Id e undefined pt ca l-am resetat in Add-Movie\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  deleteMovie(id) {\r\n    return this.http.delete(this.rootURL + '/movies/' + id);  \r\n    // returneaza un Observable\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n   \r\n               \r\n            \r\n\r\n    \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MovieComm } from './movieComm.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class MovieCommService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    selectedMovie: MovieComm\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n\r\n    getMovieById(id) {              // Use Promise, not Subscribe\r\n        console.log(\"id este \" + id);\r\n        return this.http.get<MovieComm>(this.rootURL + '/movies/' + id);\r\n            //.toPromise()\r\n            //.then(response => {\r\n            //    this.selectedMovie = response as MovieComm;\r\n            //});\r\n\r\n\r\n        //.subscribe(m => {                     // Nu merge pt ca returneaza un rezultat asincron care va fi undefined mai tarziu pt ca procesarea merge in conitnuare pana sa imi returneaze mie movie\r\n        //    this.selectedMovie = m;                   // Subscribe nu este bun, dar Promise este pt ca returneaza Observable si asta imi trebuie.\r\n        //    console.log(this.selectedMovie);\r\n        //});\r\n\r\n\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from './user.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UserService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    public formDataUser: User;\r\n    public selectedUser: User;\r\n    public updateBtnUserClicked = false;  // initial butonul de update nu e apasat; il importam in fetch-data\r\n    public idCopied: number;  // copiez id sa pot apela la update pt ca voi redefini id ca undefined intre timp\r\n\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n\r\n    postUser() {\r\n        return this.http.post(this.rootURL + '/users', this.formDataUser);   // POST function returns Observable\r\n        // returneaza un movie tip service.formData\r\n\r\n    }\r\n\r\n\r\n    getUsers() {\r\n        return this.http.get<User[]>(this.rootURL + '/users')\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { Location } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-update-movie',\r\n  templateUrl: './update-movie.component.html',\r\n  styles: []\r\n})\r\nexport class UpdateMovieComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n\r\n    constructor(public service: MovieService,\r\n        private location: Location\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n        if (this.service.updateBtnMovieClicked == true) // daca s-a apasat butonul de Update\r\n            this.autofillFormForUpdate();\r\n\r\n       }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    resetForm(formMovie?: NgForm) {    // form? parametrul poate fi null\r\n\r\n\r\n        if (formMovie != null) {\r\n            console.log(this.idCopied);\r\n            formMovie.form.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n           \r\n        }\r\n\r\n        \r\n          \r\n        this.service.updateBtnMovieClicked = false;   // resetez la false, altfel ramane marcat ca apasat\r\n        this.service.formDataMovie.Id = 0; // il fac explicit 0 pt ca ramane suprascris cu id movie updatat anterior din cauza apelului  autofillFormForUpdate()  daca am apucat sa fac inainte update\r\n    }   \r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    onSubmit(formMovie: NgForm) {\r\n\r\n            this.updateRecord(formMovie); // daca e undefined e update\r\n            formMovie.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n            this.service.updateBtnMovieClicked == false   // il resetez la false ca altfel ramane parcat ca true daca am apucat sa fac update inainte\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateRecord(formMovie: NgForm) {  // PUT request on submit\r\n\r\n        console.log(formMovie);\r\n        this.service.updateMovie(formMovie.value) // ID\r\n            //  .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if PUT operation succeeds we set the form to initial values\r\n                    console.log(\"successfully updated\");\r\n                    this.resetForm(formMovie);\r\n                    this.service.getMovies(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    autofillFormForUpdate() {\r\n        this.service.formDataMovie.Id = this.service.idCopied;   // reatribui valoarea id din fetch-data cand l-am selectat, pt ca acum este undefined\r\n        console.log(this.service.formDataMovie.Id);\r\n        this.service.formDataMovie;\r\n        console.log(this.service.formDataMovie);\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}