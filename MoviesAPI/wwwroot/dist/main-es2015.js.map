{"version":3,"sources":["./src/app/add-movie/add-movie.component.html","./src/app/add-user/add-user.component.html","./src/app/app.component.html","./src/app/details/details.component.html","./src/app/fetch-data/fetch-data.component.html","./src/app/home/home.component.html","./src/app/nav-menu/nav-menu.component.html","./src/app/update-movie/update-movie.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/add-movie/add-movie.component.ts","./src/app/add-user/add-user.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/details/details.component.ts","./src/app/fetch-data/fetch-data.component.ts","./src/app/home/home.component.ts","./src/app/nav-menu/nav-menu.component.css","./src/app/nav-menu/nav-menu.component.ts","./src/app/shared/comment.service.ts","./src/app/shared/movie.service.ts","./src/app/shared/movieComm.service.ts","./src/app/shared/user.service.ts","./src/app/update-movie/update-movie.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["export default \"<h2 class=\\\"text-center\\\">Add a movie</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"movieReactiveForm\\\" [hidden]=\\\"success\\\" autocomplete=\\\"on\\\" (ngSubmit)=\\\"onSubmit(movieReactiveForm)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Title\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Title\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n            <div *ngIf=\\\"(Title.dirty || Title.touched) && Title.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Title.errors.required\\\">Title is required.</div>\\r\\n                <div *ngIf=\\\"Title.errors.minlength\\\">Title should have at least 3 characters.</div>\\r\\n                <div *ngIf=\\\"Title.errors.maxlength\\\">Title should have at most 50 characters.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <textarea formControlName=\\\"Description\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Description\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n            <div *ngIf=\\\"(Description.dirty || Description.touched) && Description.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Description.errors.required\\\">Description is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Genre\\\">Genre: </label>\\r\\n            <select id=\\\"genre \\\" formControlName=\\\"Genre\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Genre\\\" required>\\r\\n                <option value=\\\"Adventure\\\">Adventure</option>\\r\\n                <option value=\\\"Comedy\\\">Comedy</option>\\r\\n                <option value=\\\"Horror\\\">Horror</option>\\r\\n                <option value=\\\"SciFi\\\">SciFi</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"(Genre.dirty || Genre.touched) && Genre.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Genre.errors.required\\\">Genre is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Duration\\\" type=\\\"number\\\" placeholder=\\\"Duration\\\" required>\\r\\n            <div *ngIf=\\\"(Duration.dirty || Duration.touched) && Duration.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Duration.errors.required\\\">Duration is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"YearOfRelease\\\" type=\\\"number\\\" placeholder=\\\"Year of release\\\" min=\\\"1900\\\" max=\\\"2020\\\" required>\\r\\n            <div *ngIf=\\\"(YearOfRelease.dirty || YearOfRelease.touched) && YearOfRelease.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"YearOfRelease.errors.required\\\">Year of release is required.</div>\\r\\n                <div *ngIf=\\\"YearOfRelease.errors?.min\\\">Year of release should be at least 1900.</div>\\r\\n                <div *ngIf=\\\"YearOfRelease.errors?.max\\\">Year of release should be at most the current year.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Director\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Director\\\" required>\\r\\n            <div *ngIf=\\\"(Director.dirty || Director.touched) && Director.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Director.errors.required\\\">Director is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"DateAdded\\\">Date added: </label>\\r\\n            <input formControlName=\\\"DateAdded\\\" type=\\\"date\\\" placeholder=\\\"yyyy-MM-dd\\\" required>\\r\\n            <div *ngIf=\\\"(DateAdded.dirty || DateAdded.touched) && DateAdded.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"DateAdded.errors.required\\\">Date added is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Rating\\\">Rating: </label>\\r\\n            <input formControlName=\\\"Rating\\\" type=\\\"number\\\" class=\\\"form-control\\\" min=\\\"0\\\" max=\\\"10\\\" required>\\r\\n            <div *ngIf=\\\"(Rating.dirty || Rating.touched) && Rating.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                <div *ngIf=\\\"Rating.errors.required\\\">Rating is required.</div>\\r\\n            </div>\\r\\n        </div> <br>\\r\\n\\r\\n               <div class=\\\"input-group\\\">\\r\\n                   <label for=\\\"Watched\\\">Watched:</label>\\r\\n                   <input formControlName=\\\"Watched\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n                   <label for=\\\"Watched\\\">Never watched:</label>\\r\\n                   <input formControlName=\\\"Watched\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n                   <div *ngIf=\\\"(Watched.dirty || Watched.touched) && Watched.invalid\\\" class=\\\"alert alert-danger\\\">\\r\\n                       <div *ngIf=\\\"Watched.errors.required\\\">Please select your option.</div>\\r\\n                   </div>\\r\\n               </div> <br>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formMovie.invalid\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-danger btn-lg btn-block\\\" (click)=\\\"movieReactiveForm.reset()\\\">Reset</button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">Add user</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"userReactiveForm\\\" [hidden]=\\\"success\\\" autocomplete=\\\"on\\\" (ngSubmit)=\\\"onSubmit(userReactiveForm)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"FirstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"FirstName\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"LastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"LastName\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Username\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input formControlName=\\\"Password\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div> <br>\\r\\n\\r\\n\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-danger btn-lg btn-block\\\" (click)=\\\"userReactiveForm.reset()\\\">Reset</button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\"","export default \"<body>\\r\\n    <app-nav-menu></app-nav-menu>\\r\\n\\r\\n    <div class=\\\"container\\\">\\r\\n\\r\\n        <router-outlet></router-outlet>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</body>\\r\\n\"","export default \"\\r\\n<h2 class=\\\"text-center\\\">Details for {{movieCommService.selectedMovie.Title}}</h2>\\r\\n<br>\\r\\n\\r\\n<label>Id: {{movieCommService.selectedMovie.Id}}</label>\\r\\n<br>\\r\\n<label>Title: {{movieCommService.selectedMovie.Title}}</label>\\r\\n<br>\\r\\n<label>Description: {{movieCommService.selectedMovie.Description}}</label>\\r\\n<br>\\r\\n<label>Genre: {{movieCommService.selectedMovie.Genre}}</label>\\r\\n<br>\\r\\n<label>Duration: {{movieCommService.selectedMovie.Duration}}</label>\\r\\n<br>\\r\\n<label>Year of release: {{movieCommService.selectedMovie.YearOfRelease}}</label>\\r\\n<br>\\r\\n<label>Director: {{movieCommService.selectedMovie.Director}}</label>\\r\\n<br>\\r\\n<label>Date added: {{movieCommService.selectedMovie.DateAdded | date: 'yyyy-MM-dd'}}</label>\\r\\n<br>\\r\\n<label>Rating: {{movieCommService.selectedMovie.Rating}}</label>\\r\\n<br>\\r\\n<label>Watched: {{movieCommService.selectedMovie.Watched}}</label>\\r\\n<br>\\r\\n<br>\\r\\n<h3>Comments:</h3>\\r\\n\\r\\n<table class=\\\"table table-hover\\\">\\r\\n\\r\\n    <thead class=\\\"thead-dark\\\">\\r\\n        <tr>\\r\\n            <th>Id</th>\\r\\n            <th>Text</th>\\r\\n            <th>Important</th>\\r\\n        </tr>\\r\\n    </thead>\\r\\n\\r\\n     \\r\\n        <tr *ngFor=\\\"let c of movieCommService.selectedMovie.Comments\\\">\\r\\n            <td>{{c.Id}}</td>\\r\\n            <td>{{c.Text}}</td>\\r\\n            <td>{{c.Important}}</td>\\r\\n            <td (click)=\\\"onDelete(c.Id)\\\"> Delete</td>\\r\\n            <td (click)=\\\"populateForm(c)\\\"> Update</td>\\r\\n        </tr>\\r\\n\\r\\n\\r\\n\\r\\n    <!--\\r\\n    <ng-container *ngFor=\\\"let c of comments\\\">        iterez prin comments adica apelez get din controller de Comm\\r\\n    Nu pot avea ngFor si ngIf in acelasi element; creez un ng-container, care nu afecteaza DOM \\r\\n    <tr *ngIf=\\\"c.movieID == movieService.selectedMovie.Id\\\">\\r\\n        <td>{{c.Id}}</td>\\r\\n        <td>{{c.Text}}</td>\\r\\n        <td>{{c.Important}}</td>\\r\\n        <td (click)=\\\"onDelete(c.id)\\\"> Delete</td>\\r\\n        <td (click)=\\\"onUpdate(c.id)\\\"> Update</td>\\r\\n    </tr>\\r\\n    </ng-container>\\r\\n    -->\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</table>\\r\\n\\r\\n\\r\\n    <br><br>\\r\\n    <h3>Add comment:</h3><br>\\r\\n                         <form #formComment=\\\"ngForm\\\" (submit)=\\\"onSubmit(formComment)\\\">\\r\\n\\r\\n                             <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"commentService.formDataComm.Id\\\">\\r\\n\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <textarea name=\\\"Text\\\" #Text=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Text\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Text\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n                             </div>\\r\\n                             <br>\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <label for=\\\"Important\\\">Important: </label>\\r\\n                                 <input name=\\\"Important\\\" #Important=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Important\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n                                 <label for=\\\"Important\\\">Not important: </label>\\r\\n                                 <input name=\\\"Important\\\" #Important=\\\"ngModel\\\" [(ngModel)]=\\\"commentService.formDataComm.Important\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n                             </div>\\r\\n                             <br>\\r\\n                             <div class=\\\"input-group\\\">\\r\\n                                 <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formComment.invalid\\\">\\r\\n                                     Add comment\\r\\n                                 </button>\\r\\n                             </div>\\r\\n\\r\\n                         </form>\\r\\n\\r\\n    <br>\\r\\n    <button (click)=\\\"goBack()\\\">Back</button>\\r\\n\\r\\n\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">List of movies</h2>\\r\\n<br>\\r\\n\\r\\n\\r\\n<!--<h4>Filter by date added</h4>\\r\\n<br>\\r\\n<form #form=\\\"ngForm\\\" autocomplete=\\\"on\\\" (submit)=\\\"onSubmit(form)\\\">\\r\\n    <p>From date:</p>\\r\\n    <input name=\\\"from\\\" [(ngModel)]=\\\"from\\\">\\r\\n    <br>\\r\\n    <p>To date:</p>\\r\\n    <input name=\\\"to\\\" [(ngModel)]=\\\"to\\\">\\r\\n    <br>\\r\\n    <button type=\\\"submit\\\">Filter</button>\\r\\n    <br>\\r\\n</form>\\r\\n<br>\\r\\n<br>\\r\\n<button (click)=\\\"refreshList()\\\">Refresh</button>\\r\\n<br>-->\\r\\n\\r\\n\\r\\n    <table class=\\\"table table-hover\\\">\\r\\n\\r\\n        <thead class=\\\"thead-dark\\\">\\r\\n            <tr>\\r\\n                <th>ID</th>\\r\\n                <th>Title</th>\\r\\n                <th>Description</th>\\r\\n                <th>Genre</th>\\r\\n                <th>Duration</th>\\r\\n                <th>Year of release</th>\\r\\n                <th>Director</th>\\r\\n                <th>Date added</th>\\r\\n                <th>Rating</th>\\r\\n                <th>Watched</th>\\r\\n                <th>Number of comments</th>\\r\\n                <th>Operations</th>\\r\\n\\r\\n            </tr>\\r\\n        </thead>\\r\\n\\r\\n\\r\\n        <tr *ngFor=\\\"let m of movies\\\">\\r\\n\\r\\n            <td>{{m.Id}}</td>\\r\\n            <td>{{m.Title}}</td>\\r\\n            <td>{{m.Description}}</td>\\r\\n            <td>{{m.Genre}}</td>\\r\\n            <td>{{m.Duration}}</td>\\r\\n            <td>{{m.YearOfRelease}}</td>\\r\\n            <td>{{m.Director}}</td>\\r\\n            <td>{{m.DateAdded | date: 'yyyy-MM-dd'}}</td>  <!-- pipe format date-->\\r\\n            <td>{{m.Rating}}</td>\\r\\n            <td>{{m.Watched}}</td>\\r\\n            <td>{{m.NumberOfComments}}</td>  \\r\\n            <td>\\r\\n                <a [routerLink]=\\\"['/fetch-data', m.Id]\\\" routerLinkActive=\\\"active\\\"> Details</a>\\r\\n                <a [routerLink]=\\\"['/update', m.Id]\\\" routerLinkActive=\\\"active\\\" (click)=\\\"populateForm(m)\\\"> Update</a>\\r\\n                <a [routerLink]=\\\"['/delete', m.Id]\\\" routerLinkActive=\\\"active\\\" (click)=\\\"onDelete(m.Id)\\\"> Delete</a>\\r\\n            </td>  <!-- transmit id prin router link -->\\r\\n\\r\\n        </tr>\\r\\n\\r\\n    </table>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<h1>Hello, world!</h1>\\r\\n<p>Welcome to your new single-page application, built with:</p>\\r\\n<ul>\\r\\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\\r\\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\\r\\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\\r\\n</ul>\\r\\n<p>To help you get started, we've also set up:</p>\\r\\n<ul>\\r\\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\\r\\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\\r\\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\\r\\n</ul>\\r\\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\\r\\n\"","export default \"<header>\\r\\n    <nav class=\\\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n            <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/']\\\">Home</a>\\r\\n            <button class=\\\"navbar-toggler\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    data-toggle=\\\"collapse\\\"\\r\\n                    data-target=\\\".navbar-collapse\\\"\\r\\n                    aria-label=\\\"Toggle navigation\\\"\\r\\n                    [attr.aria-expanded]=\\\"isExpanded\\\"\\r\\n                    (click)=\\\"toggle()\\\">\\r\\n                <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n            </button>\\r\\n            <div class=\\\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\\\"\\r\\n                 [ngClass]=\\\"{ show: isExpanded }\\\">\\r\\n                <ul class=\\\"navbar-nav flex-grow\\\">\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/fetch-data']\\\">Fetch data</a>\\r\\n                    </li>\\r\\n\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/add']\\\">Add movie</a>\\r\\n                    </li>\\r\\n\\r\\n                    <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n                        <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/addUser']\\\">Register</a>\\r\\n                    </li>\\r\\n\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n\"","export default \"<h2 class=\\\"text-center\\\">Update movie \\\"{{service.formDataMovie.Title}}\\\"</h2>\\r\\n<br>\\r\\n\\r\\n<form #formMovie=\\\"ngForm\\\" autocomplete=\\\"on\\\" (submit)=\\\"onSubmit(formMovie)\\\">\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"Id\\\" [value]=\\\"service.formDataMovie.Id\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Title\\\" #Title=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Title\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Title\\\" required maxlength=\\\"50\\\" minlength=\\\"3\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <textarea name=\\\"Description\\\" #Description=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Description\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Description\\\" rows=\\\"5\\\" cols=\\\"50\\\" required></textarea>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Genre\\\">Genre: </label>\\r\\n            <select id=\\\"genre \\\" form=\\\"Genre\\\" name=\\\"Genre\\\" #Genre=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Genre\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Genre\\\" required>\\r\\n                <option value=\\\"Adventure\\\">Adventure</option>\\r\\n                <option value=\\\"Comedy\\\">Comedy</option>\\r\\n                <option value=\\\"Horror\\\">Horror</option>\\r\\n                <option value=\\\"SciFi\\\">SciFi</option>\\r\\n            </select>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Duration\\\" #Duration=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Duration\\\" type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"Duration\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"YearOfRelease\\\" #YearOfRelease=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.YearOfRelease\\\" type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"Year of release\\\" min=\\\"1900\\\" max=\\\"2020\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input name=\\\"Director\\\" #Director=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Director\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Director\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label>Date added: </label>\\r\\n            <!-- [(ngModel)] = 2 way data-binding-->\\r\\n            <input name=\\\"DateAdded\\\" #DateAdded=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.DateAdded\\\" type=\\\"date\\\" class=\\\"form-control\\\" placeholder=\\\"Date added\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Rating\\\">Rating: </label>\\r\\n            <input name=\\\"Rating\\\" #Rating=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Rating\\\" type=\\\"number\\\" class=\\\"form-control\\\" min=\\\"0\\\" max=\\\"10\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"Watched\\\">Watched:</label>\\r\\n            <input name=\\\"Watched\\\" #Watched=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Watched\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"true\\\">\\r\\n            <label for=\\\"Watched\\\">Never watched:</label>\\r\\n            <input name=\\\"Watched\\\" #Watched=\\\"ngModel\\\" [(ngModel)]=\\\"service.formDataMovie.Watched\\\" class=\\\"form-control\\\" type=\\\"radio\\\" value=\\\"false\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <button class=\\\"btn btn-success btn-lg btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"formMovie.invalid\\\">\\r\\n            Submit\\r\\n        </button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { NgForm, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Output, EventEmitter } from '@angular/core';     // Event Emitter pt submit reactive form\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\r\nimport { Movie } from '../shared/movie.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-movie',\r\n  templateUrl: './add-movie.component.html',\r\n  styles: []\r\n})\r\n\r\n\r\n\r\n\r\nexport class AddMovieComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n    movieReactiveForm: FormGroup;\r\n\r\n    get Title() {\r\n        return this.movieReactiveForm.get('Title');\r\n    }\r\n\r\n    get Description() {\r\n        return this.movieReactiveForm.get('Description');\r\n    }\r\n\r\n    get Genre() {\r\n        return this.movieReactiveForm.get('Genre');\r\n    }\r\n\r\n    get Duration() {\r\n        return this.movieReactiveForm.get('Duration');\r\n    }\r\n\r\n    get YearOfRelease() {\r\n        return this.movieReactiveForm.get('YearOfRelease');\r\n    }\r\n\r\n    get Director() {\r\n        return this.movieReactiveForm.get('Director');\r\n    }\r\n\r\n    get DateAdded() {\r\n        return this.movieReactiveForm.get('DateAdded');\r\n    }\r\n\r\n    get Rating() {\r\n        return this.movieReactiveForm.get('Rating');\r\n    }\r\n\r\n    get Watched() {\r\n        return this.movieReactiveForm.get('Watched');\r\n    }\r\n\r\n\r\n\r\n    // Form state\r\n    loading = false;\r\n    success = false;\r\n\r\n\r\n\r\n\r\n    constructor(public service: MovieService,\r\n        private location: Location,\r\n        private fb: FormBuilder\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n\r\n        this.movieReactiveForm = this.fb.group({\r\n            Title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n            Description: ['', [Validators.required]],\r\n            Genre: ['', [Validators.required]],\r\n            Duration: ['', [Validators.required]],\r\n            YearOfRelease: ['', [Validators.required, Validators.min(1900), Validators.max(2020)]],\r\n            Director: ['', [Validators.required]],\r\n            DateAdded: ['', [Validators.required]],         // ar trebui custom validator pt dateAdded < Date.now\r\n            Rating: ['', [Validators.required]],\r\n            Watched: ['', [Validators.required]]\r\n        });\r\n    \r\n\r\n            this.resetForm();   // initialize model property  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    onSubmit(form) {\r\n\r\n        this.movieReactiveForm = form;  // form transmis ca parametru din html\r\n        this.service.formDataMovie = this.movieReactiveForm.value;  // service.formDataMovie ia valoarea form din html\r\n      \r\n        this.service.postMovie()\r\n            // .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if POST operation succeeds we set the form to initial values\r\n                    console.log(\"successfully added\");\r\n                    this.resetForm();\r\n                    this.service.getMovies(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    resetForm() {\r\n        this.service.formDataMovie = {  // initialize model property\r\n                        Id: 0,\r\n                        Title: '',\r\n                        Description: '',\r\n                        Genre: null,\r\n                        Duration: null,\r\n                        YearOfRelease: null,\r\n                        Director: '',\r\n                        DateAdded: '',\r\n                        Rating: null,\r\n                        Watched: null\r\n                    }\r\n           \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../shared/user.service';\r\nimport { NgForm, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Output, EventEmitter } from '@angular/core';     // Event Emitter pt submit reactive form\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'\r\nimport { User } from '../shared/user.model';\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'app-add-user',\r\n    templateUrl: './add-user.component.html',\r\n    styles: []\r\n})\r\n\r\n\r\n\r\n\r\nexport class AddUserComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n    userReactiveForm: FormGroup;\r\n\r\n    get FirstName() {\r\n        return this.userReactiveForm.get('FirstName');\r\n    }\r\n\r\n    get LastName() {\r\n        return this.userReactiveForm.get('LastName');\r\n    }\r\n\r\n    get Username() {\r\n        return this.userReactiveForm.get('Username');\r\n    }\r\n\r\n\r\n    // Form state\r\n    loading = false;\r\n    success = false;\r\n\r\n\r\n\r\n\r\n    constructor(public service: UserService,\r\n        private location: Location,\r\n        private fb: FormBuilder\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n\r\n        this.userReactiveForm = this.fb.group({\r\n            FirstName: ['', ['']],\r\n            LastName: ['', ['']],\r\n            Username: ['', ['']],\r\n            Password: ['', ['']],\r\n\r\n        });\r\n\r\n\r\n        this.resetForm();   // initialize model property  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onSubmit(form) {\r\n\r\n        this.userReactiveForm = form;  // form transmis ca parametru din html\r\n        this.service.formDataUser = this.userReactiveForm.value;  // service.formDataMovie ia valoarea form din html\r\n\r\n        this.service.postUser()\r\n            // .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if POST operation succeeds we set the form to initial values\r\n                    console.log(\"successfully added\");\r\n                    this.resetForm();\r\n                    this.service.getUsers(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    resetForm() {\r\n        this.service.formDataUser = {  // initialize model property\r\n            Id: 0,\r\n            FirstName: '',\r\n            LastName: '',\r\n            Username: '',\r\n            Password: '',\r\n        }\r\n\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {HomeComponent} from \"./home/home.component\";\r\nimport {FetchDataComponent} from \"./fetch-data/fetch-data.component\";\r\nimport { DetailsComponent } from \"./details/details.component\";\r\nimport { AddMovieComponent } from \"./add-movie/add-movie.component\";\r\nimport { UpdateMovieComponent } from \"./update-movie/update-movie.component\";\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    \r\n    { path: '', component: HomeComponent, pathMatch: 'full' },\r\n    { path: 'fetch-data', component: FetchDataComponent },\r\n    { path: 'fetch-data/:id', component: DetailsComponent },\r\n    { path: 'add', component: AddMovieComponent },\r\n    { path: 'update/:id', component: UpdateMovieComponent },\r\n    { path: 'delete/:id', component: FetchDataComponent },\r\n    { path: 'addUser', component: AddUserComponent } \r\n \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { MovieService } from './shared/movie.service';\r\nimport { MovieCommService } from './shared/movieComm.service';\r\nimport { FetchDataComponent } from './fetch-data/fetch-data.component';\r\nimport { DetailsComponent } from './details/details.component';\r\nimport { AddMovieComponent } from './add-movie/add-movie.component';\r\nimport { UpdateMovieComponent } from './update-movie/update-movie.component';\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        NavMenuComponent,\r\n        HomeComponent,\r\n        FetchDataComponent,\r\n        DetailsComponent,\r\n        AddMovieComponent,\r\n        UpdateMovieComponent,\r\n        AddUserComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n        HttpClientModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        AppRoutingModule\r\n    ],\r\n\r\n    providers: [MovieService],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Location } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Comment } from '../shared/comment.model';\r\nimport { CommentService } from '../shared/comment.service';\r\nimport { MovieComm } from '../shared/movieComm.model';\r\nimport { MovieCommService } from '../shared/movieComm.service';\r\n\r\n\r\n@Component({\r\n    selector: 'app-details',\r\n    templateUrl: './details.component.html',\r\n    styles: []\r\n})\r\n\r\nexport class DetailsComponent implements OnInit {\r\n\r\n    public comments: Comment[];\r\n    public idCommSelected: number;\r\n    public commToBeUpdated: Comment;\r\n    public copyOfSelectedComment: MovieComm; // pt ca sunt operatii asincrone si treb copiat sa il pot reaccesa\r\n\r\n\r\n    constructor(private movieCommService: MovieCommService,   // importam service-ul care include si proprietatea Comments in Movie\r\n                private commentService: CommentService,\r\n                private activatedRoute: ActivatedRoute,\r\n                private location: Location) { }\r\n\r\n\r\n\r\n\r\n    // https://www.tektutorialshub.com/angular/angular-passing-parameters-to-route/\r\n    // https://angular.io/tutorial/toh-pt5\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit(): void {\r\n\r\n       // this.resetForm();   // initialize model property\r\n\r\n        this.getMovieById();\r\n      //  this.getComments();\r\n\r\n        //if (this.commentService.updateBtnCommClicked == true) // daca s-a apasat butonul de Update\r\n        //{\r\n        //    this.populateForm();\r\n        //    console.log(\"dsgvds\" + this.commentService.commentList);\r\n        //}\r\n\r\n\r\n       // else\r\n            this.resetForm();   // initialize model property\r\n\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getMovieById(): void {\r\n        const id = +this.activatedRoute.snapshot.paramMap.get('id');\r\n        console.log(\"id din  details \" + id);\r\n        this.movieCommService.getMovieById(id)    // returneaza un Observable si nu mai este asincron\r\n            // .subscribe(m => this.selectedMovie = m);  // tratez in service getById, aici doar apelez\r\n            .toPromise()\r\n            .then(response => {\r\n                this.movieCommService.selectedMovie = response as MovieComm;\r\n                this.copyOfSelectedComment = this.movieCommService.selectedMovie;  // e tip MovieComm\r\n            });\r\n\r\n        console.log(this.movieCommService.selectedMovie);  // daca foloseam Subscribe, getMovieById era asincron si intarzia functia pana sa se proceseze si atunci selectedMovie ramanea tot undefined pt ca nu e initializat sus\r\n        \r\n    }\r\n\r\n\r\n    // The route.snapshot is a static image of the route information shortly after the component was created.\r\n\r\n    // The paramMap is a dictionary of route parameter values extracted from the URL.The \"id\" key returns the id of the movie to fetch.\r\n\r\n    // Route parameters are always strings. The JavaScript(+) operator converts the string to a number, which is what a movie id should be.\r\n\r\n\r\n\r\n\r\n\r\n    //// Populam tabelul din Form; in form verific cu ngIf daca comm.movieId = movie.id\r\n    //getComments() {         // Get din controller de Comm\r\n\r\n    //    this.commentService.getComments()\r\n    //        .subscribe(data => this.comments = data)\r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n    resetForm(formComment?: NgForm) {    // form? parametrul poate fi null\r\n\r\n        //if (this.commentService.updateBtnCommClicked == true) // daca s-a apasat butonul de Update\r\n        //    this.populateForm();\r\n\r\n        if (formComment != null)\r\n            formComment.form.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n\r\n        this.commentService.formDataComm = {  // initialize model property\r\n            Id: 0,\r\n            MovieID: 0,\r\n            Text: '',\r\n            Important: true,\r\n        }\r\n\r\n\r\n        this.commToBeUpdated = { // altfel e undefined cand vreau sa-l initializez\r\n            Id: 0,\r\n            MovieID: 0,\r\n            Text: '',\r\n            Important: true,\r\n        }\r\n\r\n        this.commentService.formDataComm.Id = 0; // il fac explicit 0 pt ca ramane suprascris cu idComment updatat anterior din cauza apelului  autofillFormForUpdate()  daca am apucat sa fac inainte update\r\n\r\n      //  console.log(formComment.value.Id);\r\n    }\r\n\r\n\r\n\r\n\r\n    onSubmit(formComment: NgForm) {\r\n\r\n        // facem diferenta intre Post si PUT verificand Id; undefined sau 0\r\n       // if (formComment.value.Id == 0 && this.commentService.updateBtnCommClicked == false)         //{)\r\n\r\n        if (this.commentService.formDataComm.Id == 0)\r\n            this.insertRecord(formComment);\r\n\r\n        else  // update\r\n            this.updateRecord(formComment);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    insertRecord(formComment: NgForm) {  // POST request on submit\r\n        this.commentService.formDataComm.MovieID =  +this.activatedRoute.snapshot.paramMap.get('id');\r\n\r\n        console.log(this.commentService.formDataComm);   // aici inca nu are id, abia dupa ce ii fac post primeste id\r\n\r\n        this.commentService.postComment()       //.subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n            response => {    // if POST operation succeeds we set the form to initial values\r\n                console.log(this.commentService.formDataComm);\r\n                this.resetForm(formComment);\r\n                  this.getMovieById();    // refresh la lista, care e o lista de moviesComm\r\n               // this.getComments();   // Nu, lista are obiecte Comm\r\n            },\r\n\r\n            error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // e asincron si folosim Promise in loc de subscribe\r\n    updateRecord(formComment: NgForm) {  // PUT request on submit\r\n        \r\n        formComment.value.Id = this.commToBeUpdated.Id;  // asignez lui formDataComm id-ul lui commToBeUpdated;                 copiat din apelul onUpdate() la click event\r\n        //formComment.value.MovieID = +this.activatedRoute.snapshot.paramMap.get('id');  // asignez movieID din ruta, sa pot avea toate proprietatile pt a putea construi un movie, pt ca nu iau toate proprietatile din form\r\n\r\n        console.log(formComment.value.Id);\r\n\r\n        //this.getMovieById();\r\n\r\n        console.log(\"am intrat in updateRecord \"+ formComment.value);\r\n\r\n        this.commentService.updateComment(formComment.value) // ID\r\n            //.subscribe(   // // Call subscribe() to start listening for updates.\r\n\r\n            //    response => {    // if PUT operation succeeds we set the form to initial values\r\n            //        this.resetForm(form);\r\n            //           this.getMovieById(); // refresh la lista;                                                          // success ia ca parametri un mesaj si numele aplicatiei 'Title' tip string\r\n            //      //  this.getComments();\r\n            //    },\r\n            .toPromise()\r\n            .then(response => {    // if PUT operation succeeds we set the form to initial values\r\n\r\n                //this.copyOfSelectedComment = this.movieCommService.selectedMovie;  // e tip MovieComm\r\n\r\n                this.resetForm(formComment);\r\n                this.getMovieById(); // refresh la lista;                                                          // success ia ca parametri un mesaj si numele aplicatiei 'Title' tip string\r\n                  //  this.getComments();\r\n                console.log(\"Update comment successfully\");\r\n            },\r\n\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n\r\n        this.resetForm(formComment);\r\n        this.commentService.updateBtnCommClicked = false;   // setam inapoi butonul de update la false\r\n        //this.getMovieById(); // refresh la lista; \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    // ATENTIE: IN TABEL AM TIPUL MOVIECOMM, NU COMMENT!!\r\n    populateForm(c)  // populam form cu movieComm selectat si incarcat din server, dar transformat intru-un Comment\r\n    {                           // form data este proprietatea din service referitoare la form\r\n\r\n        console.log(this.copyOfSelectedComment);\r\n        console.log(this.commentService.getCommentById(c.Id));\r\n\r\n        //this.commentService.updateBtnCommClicked = true; // s-a apasat butotnul de Update\r\n        //c.Id = this.copyOfSelectedComment.Comments.Id;   // fac legaturi intre cele 2 obiecte; transfer proprietati de la copie la obiectul nou construit\r\n        //c.MovieID = this.copyOfSelectedComment.Comments.MovieID;\r\n        //c.Text = this.copyOfSelectedComment.Comments.Text;\r\n        //c.Important = this.copyOfSelectedComment.Comments.Important;\r\n\r\n        this.commentService.getCommentById(c.Id)\r\n            .toPromise()\r\n            .then(result => {\r\n                this.commentService.selectedComment = result;\r\n\r\n                console.log(\"comment selectat este \" + this.commentService.selectedComment.Text);\r\n\r\n                this.commToBeUpdated.Id = this.commentService.selectedComment.Id;     // this.idCommSelected;\r\n                this.commToBeUpdated.MovieID = this.commentService.selectedComment.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n                this.commToBeUpdated.Text = this.commentService.selectedComment.Text\r\n                this.commToBeUpdated.Important = this.commentService.selectedComment.Important;\r\n\r\n                console.log(this.commToBeUpdated);\r\n\r\n            }, error => console.error(error));\r\n\r\n\r\n\r\n\r\n        //this.commToBeUpdated.Id = this.commentService.getCommentById(c.Id);     // this.idCommSelected;\r\n        //this.commToBeUpdated.MovieID = c.Comments.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n        //this.commToBeUpdated.Text = c.Comments.Text\r\n        //this.commToBeUpdated.Important = c.Comments.Important;\r\n        \r\n\r\n        // transformam MovieComm in Comm\r\n        //this.commToBeUpdated.Id = c.Comments.Id;     // this.idCommSelected;\r\n        //this.commToBeUpdated.MovieID = c.Comments.MovieID;        // valorile sunt luate din tabel, vezi structura campurilor\r\n        //this.commToBeUpdated.Text = c.Comments.Text\r\n        //this.commToBeUpdated.Important = c.Comments.Important;\r\n\r\n        this.commentService.formDataComm = this.commToBeUpdated;        // formData din service ia valoarea noului obiect construit\r\n\r\n        console.log(this.commentService.formDataComm.Text);\r\n    }           // formDataComm este suprascris si il pot apela ca parametru la populateForm in ngOnInit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //onUpdate(id) {  \r\n    //    this.idCommSelected = id;\r\n    //    console.log(\"clicked, id = \", this.idCommSelected);\r\n    //    this.commentService.updateBtnCommClicked = true; // s-a apasat butotnul de Update\r\n\r\n\r\n    //}\r\n\r\n\r\n\r\n\r\n    onDelete(id) {\r\n        console.log(id);\r\n        this.commentService.deleteComment(id)\r\n            .subscribe(response => {\r\n                console.log(\"successfully deleted\");\r\n                this.getMovieById(); // refresh\r\n            },\r\n                error => {\r\n                    console.log(error);\r\n                });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    goBack(): void {\r\n        this.location.back();\r\n    }\r\n}   \r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { Movie } from '../shared/movie.model';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n    selector: 'app-fetch-data',\r\n    templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent implements OnInit {\r\n\r\n    public movies: Movie[];\r\n    public filteredMovies: Movie[];\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    submitPressed = false;\r\n\r\n\r\n    constructor(private service: MovieService) { }\r\n\r\n    ngOnInit() {\r\n        this.getAllMovies();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onSubmit(form: NgForm) {\r\n        this.submitPressed = true; // inseamna  ca s-a accesat input-ul de filter si returnam filteredMovies\r\n        this.getFilteredMoviesByDate(form);\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // in acelasi tabel afisez fie toate filmele, fie pe cele filtrate\r\n    // diferenta o face o variabila submitPressed care initial este false si isi schimba valoarea daca se apasa submit\r\n\r\n    getAllMovies() {\r\n        this.service.getMovies()\r\n            .subscribe(data => this.movies = data);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getFilteredMoviesByDate(form: NgForm) {\r\n\r\n        console.log(form.value.from);\r\n\r\n        this.service.filterMoviesByDate(form.value.from, form.value.to)     //form.value.\r\n            // .subscribe(data => {\r\n            .toPromise()\r\n            .then(response => {\r\n                this.movies = response;\r\n                console.log(this.movies)\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    onDelete(id) {\r\n        console.log(\"id este \" + id);\r\n        this.service.deleteMovie(id)\r\n            .subscribe(response => {\r\n                console.log(\"successfully deleted\");\r\n                this.getAllMovies(); // refresh\r\n            },\r\n                error => {\r\n                    console.log(error);\r\n                });\r\n  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // auto fill form\r\n    populateForm(movie: Movie)  // populam form cu movie selectat si incarcat din server\r\n    {                           // form data este proprietatea din service referitoare la form\r\n\r\n        this.service.formDataMovie = movie; \r\n        this.service.updateBtnMovieClicked = true;   // se apasa butonul, il apelez in add-movie\r\n        this.service.idCopied = movie.Id;   // copiez valoare id si apelez din add-movie la update\r\n\r\n        console.log(movie);\r\n\r\n        //this.service.formData = Object.assign({}, movie);  // in formData pune o copie a obiectului meu movie\r\n        //console.log(this.service.formData);\r\n        // Since the form is bound to formData properties,\r\n        // the form field will get with populated corresponding details.\r\n\r\n     \r\n    }\r\n\r\n\r\n\r\n\r\n    refreshList() {\r\n        console.log(\"refresh clicked\");\r\n        this.getAllMovies();\r\n    }\r\n\r\n}\r\n\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n}\r\n","export default \"a.navbar-brand {\\r\\n  white-space: normal;\\r\\n  text-align: center;\\r\\n  word-break: break-all;\\r\\n}\\r\\n\\r\\nhtml {\\r\\n  font-size: 14px;\\r\\n}\\r\\n\\r\\n@media (min-width: 768px) {\\r\\n  html {\\r\\n    font-size: 16px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.box-shadow {\\r\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFDQTtFQUNFO0lBQ0UsZUFBZTtFQUNqQjtBQUNGOztBQUVBO0VBQ0UsOENBQThDO0FBQ2hEIiwiZmlsZSI6InNyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImEubmF2YmFyLWJyYW5kIHtcclxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcbn1cclxuXHJcbmh0bWwge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcclxuICBodG1sIHtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICB9XHJcbn1cclxuXHJcbi5ib3gtc2hhZG93IHtcclxuICBib3gtc2hhZG93OiAwIC4yNXJlbSAuNzVyZW0gcmdiYSgwLCAwLCAwLCAuMDUpO1xyXG59XHJcbiJdfQ== */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Comment } from './comment.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommentService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    commentList: Comment[];\r\n    formDataComm: Comment;\r\n    selectedComment: Comment;\r\n    updateBtnCommClicked: boolean;\r\n\r\n\r\n    constructor(private http: HttpClient) {}\r\n  \r\n\r\n  postComment() {    \r\n    return this.http.post(this.rootURL + '/comments', this.formDataComm);   // POST function returns Observable\r\n\r\n  }\r\n\r\n\r\n\r\n  getComments() {\r\n    return this.http.get<Comment[]>(this.rootURL + '/comments')\r\n \r\n  }\r\n\r\n\r\n  getCommentById(id) {\r\n        console.log(\"id este \" + id);\r\n      return this.http.get<Comment>(this.rootURL + '/comments/' + id);\r\n           // .subscribe(result => {\r\n           //.toPromise()\r\n           //.then(result => {\r\n           //     this.selectedComment= result;\r\n\r\n           //     console.log(\"comment selectat este \" + this.selectedComment.Text);\r\n\r\n           // }, error => console.error(error));\r\n    }\r\n\r\n\r\n\r\n\r\n  updateComment(formData: Comment) {\r\n      return this.http.put(this.rootURL + '/comments/' + formData.Id, this.formDataComm);\r\n\r\n  }\r\n\r\n\r\n  deleteComment(id) {\r\n    return this.http.delete(this.rootURL + '/comments/' + id);  \r\n  \r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Movie } from './movie.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class MovieService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    public formDataMovie: Movie;\r\n    public selectedMovie: Movie;\r\n    public updateBtnMovieClicked = false;  // initial butonul de update nu e apasat; il importam in fetch-data\r\n    public idCopied: number;  // copiez id sa pot apela la update pt ca voi redefini id ca undefined intre timp\r\n\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n\r\n\r\n    postMovie() {\r\n        console.log(\"din service\" + this.formDataMovie.Title)\r\n    return this.http.post(this.rootURL + '/movies', this.formDataMovie);   // POST function returns Observable\r\n    // returneaza un movie tip service.formData\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n  getMovies() {\r\n      return this.http.get<Movie[]>(this.rootURL + '/movies')\r\n     \r\n  }\r\n\r\n\r\n    //getMovieById(id) {                // in serviceComm pt ca returnez si lista de Comments\r\n    //    console.log(\"id este \" + id);\r\n    //    return this.http.get<Movie>(this.rootURL + '/movies/' + id)\r\n         \r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // GET: movies/filter?from=a&to=b\r\n    filterMoviesByDate(from, to) {\r\n        return this.http.get<Movie[]>(this.rootURL + '/movies/filter?from=' + from + '&to=' + to);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateMovie(formData: Movie) {\r\n        console.log(formData);\r\n    return this.http.put(this.rootURL + '/movies/' + this.idCopied, this.formDataMovie);   // transmite URL si ID in PUT request prin concatenare\r\n    // returneaza un Observable\r\n        // in idCopied e copiata valoarea id caruia i se face update; daca zic this.formData.Id e undefined pt ca l-am resetat in Add-Movie\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  deleteMovie(id) {\r\n    return this.http.delete(this.rootURL + '/movies/' + id);  \r\n    // returneaza un Observable\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n   \r\n               \r\n            \r\n\r\n    \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MovieComm } from './movieComm.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class MovieCommService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    selectedMovie: MovieComm\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n\r\n    getMovieById(id) {              // Use Promise, not Subscribe\r\n        console.log(\"id este \" + id);\r\n        return this.http.get<MovieComm>(this.rootURL + '/movies/' + id);\r\n            //.toPromise()\r\n            //.then(response => {\r\n            //    this.selectedMovie = response as MovieComm;\r\n            //});\r\n\r\n\r\n        //.subscribe(m => {                     // Nu merge pt ca returneaza un rezultat asincron care va fi undefined mai tarziu pt ca procesarea merge in conitnuare pana sa imi returneaze mie movie\r\n        //    this.selectedMovie = m;                   // Subscribe nu este bun, dar Promise este pt ca returneaza Observable si asta imi trebuie.\r\n        //    console.log(this.selectedMovie);\r\n        //});\r\n\r\n\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from './user.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UserService {\r\n\r\n    readonly rootURL = \"https://localhost:44335\";\r\n    public formDataUser: User;\r\n    public selectedUser: User;\r\n    public updateBtnUserClicked = false;  // initial butonul de update nu e apasat; il importam in fetch-data\r\n    public idCopied: number;  // copiez id sa pot apela la update pt ca voi redefini id ca undefined intre timp\r\n\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n\r\n    postUser() {\r\n        return this.http.post(this.rootURL + '/users', this.formDataUser);   // POST function returns Observable\r\n        // returneaza un movie tip service.formData\r\n\r\n    }\r\n\r\n\r\n    getUsers() {\r\n        return this.http.get<User[]>(this.rootURL + '/users')\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MovieService } from '../shared/movie.service';\r\nimport { Location } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-update-movie',\r\n  templateUrl: './update-movie.component.html',\r\n  styles: []\r\n})\r\nexport class UpdateMovieComponent implements OnInit {\r\n\r\n    idCopied: number;\r\n\r\n    constructor(public service: MovieService,\r\n        private location: Location\r\n    ) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ngOnInit() {\r\n\r\n        if (this.service.updateBtnMovieClicked == true) // daca s-a apasat butonul de Update\r\n            this.autofillFormForUpdate();\r\n\r\n       }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    resetForm(formMovie?: NgForm) {    // form? parametrul poate fi null\r\n\r\n\r\n        if (formMovie != null) {\r\n            console.log(this.idCopied);\r\n            formMovie.form.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n           \r\n        }\r\n\r\n        \r\n          \r\n        this.service.updateBtnMovieClicked = false;   // resetez la false, altfel ramane marcat ca apasat\r\n        this.service.formDataMovie.Id = 0; // il fac explicit 0 pt ca ramane suprascris cu id movie updatat anterior din cauza apelului  autofillFormForUpdate()  daca am apucat sa fac inainte update\r\n    }   \r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    onSubmit(formMovie: NgForm) {\r\n\r\n            this.updateRecord(formMovie); // daca e undefined e update\r\n            formMovie.reset();  // form.reset() -> all desccendents are marked pristine and untouched and values are null\r\n            this.service.updateBtnMovieClicked == false   // il resetez la false ca altfel ramane parcat ca true daca am apucat sa fac update inainte\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateRecord(formMovie: NgForm) {  // PUT request on submit\r\n\r\n        console.log(formMovie);\r\n        this.service.updateMovie(formMovie.value) // ID\r\n            //  .subscribe(   // // Call subscribe() to start listening for updates.\r\n            .toPromise()\r\n            .then(\r\n                response => {    // if PUT operation succeeds we set the form to initial values\r\n                    console.log(\"successfully updated\");\r\n                    this.resetForm(formMovie);\r\n                    this.service.getMovies(); // refresh la lista;\r\n                    this.location.back();\r\n                },\r\n\r\n                error => {\r\n                    console.log(error)\r\n                })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    autofillFormForUpdate() {\r\n        this.service.formDataMovie.Id = this.service.idCopied;   // reatribui valoarea id din fetch-data cand l-am selectat, pt ca acum este undefined\r\n        console.log(this.service.formDataMovie.Id);\r\n        this.service.formDataMovie;\r\n        console.log(this.service.formDataMovie);\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///"}